price_elasticity.ipynb C:\Users\thanakb\AppData\Local\Microsoft\Windows\INetCache\Content.Word\price_elasticity.ipynb    ;   C:\Users\thanakb\AppData\Local\Temp\price_elasticity.ipynb G {
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Price elasticity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add system path to custom Python function\n",
    "import sys\n",
    "sys.path.insert(0, '/nfs/science/shared/ipythonNotebooks/thanakb/dh_python_fn/')\n",
    "from dhMail import sentMeMail\n",
    "import dhExadata as ex\n",
    "\n",
    "import pandas as pd\n",
    "import sqlalchemy as sa\n",
    "\n",
    "# No need to input proxy & pwd\n",
    "engine = sa.create_engine(\"oracle+cx_oracle://[an_cm_ws07]:@exa_gbtthprdd_an\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use data from SXGP as study case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_tbl = ex.list_table(engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['BASK_MEAT_NO_MEAT_PEN',\n",
       " 'BASK_MEAT_NO_MEAT_PEN_L',\n",
       " 'BULK_BASK',\n",
       " 'BULK_BASK_SALES',\n",
       " 'BULK_LFL_STORE',\n",
       " 'BULK_OUT',\n",
       " 'DK_DEPT_LIST',\n",
       " 'DK_DIVISION_LIST',\n",
       " 'LFL_TEST',\n",
       " 'MEAT_BASK',\n",
       " 'MEAT_BASK_LY',\n",
       " 'MEAT_CUST',\n",
       " 'MEAT_CUST_CTR',\n",
       " 'MEAT_CUST_ELI',\n",
       " 'MEAT_CUST_EXIST_NEW',\n",
       " 'MEAT_CUST_FLAG',\n",
       " 'MEAT_CUST_PRE',\n",
       " 'MEAT_CUST_PRE_NEW',\n",
       " 'MEAT_CUST_PRO',\n",
       " 'MEAT_CUST_TREND',\n",
       " 'MEAT_EXP_ITM',\n",
       " 'MEAT_HALO_N1',\n",
       " 'MEAT_HALO_V1',\n",
       " 'MEAT_HALO_V2',\n",
       " 'MEAT_HDET_ITM',\n",
       " 'MEAT_NEW_CUST_WKLY',\n",
       " 'MORAKOT_B_PEN',\n",
       " 'NEW_CUSTS_DAILY_TY',\n",
       " 'NEW_CUST_WEEKLY_TY',\n",
       " 'SXGP_201825_P1_BASK',\n",
       " 'SXGP_201825_P1_CTR',\n",
       " 'SXGP_201825_P1_CUST',\n",
       " 'SXGP_201825_P1_DIST',\n",
       " 'SXGP_201825_P1_ITM',\n",
       " 'SXGP_201825_P1_NOT',\n",
       " 'SXGP_201825_P1_SUB',\n",
       " 'SXGP_201825_P2_BASK',\n",
       " 'SXGP_201825_P2_CTR',\n",
       " 'SXGP_201825_P2_CUST',\n",
       " 'SXGP_201825_P2_DIST',\n",
       " 'SXGP_201825_P2_ITM',\n",
       " 'SXGP_201826_P1_BASK',\n",
       " 'SXGP_201826_P1_CTR',\n",
       " 'SXGP_201826_P1_CUST',\n",
       " 'SXGP_201826_P1_DIST',\n",
       " 'SXGP_201826_P1_ITM',\n",
       " 'SXGP_201826_P2_BASK',\n",
       " 'SXGP_201826_P2_CTR',\n",
       " 'SXGP_201826_P2_CUST',\n",
       " 'SXGP_201826_P2_DIST',\n",
       " 'SXGP_201826_P2_ITM',\n",
       " 'SXGP_201826_P2_REDEM',\n",
       " 'SXGP_201826_P2_THRES',\n",
       " 'SXGP_201827_P1_BASK',\n",
       " 'SXGP_201827_P1_CTR',\n",
       " 'SXGP_201827_P1_CUST',\n",
       " 'SXGP_201827_P1_DIST',\n",
       " 'SXGP_201827_P1_ITM',\n",
       " 'SXGP_201827_P1_REDEM',\n",
       " 'SXGP_201827_P1_THRES',\n",
       " 'SXGP_201827_P2_BASK',\n",
       " 'SXGP_201827_P2_CTR',\n",
       " 'SXGP_201827_P2_CUST',\n",
       " 'SXGP_201827_P2_DIST',\n",
       " 'SXGP_201827_P2_ITM',\n",
       " 'SXGP_201827_P2_REDEM',\n",
       " 'SXGP_201827_P2_THRES',\n",
       " 'SXGP_201828_P1_BASK',\n",
       " 'SXGP_201828_P1_CTR',\n",
       " 'SXGP_201828_P1_CUST',\n",
       " 'SXGP_201828_P1_DIST',\n",
       " 'SXGP_201828_P1_ITM',\n",
       " 'SXGP_201828_P1_REDEM',\n",
       " 'SXGP_201828_P1_THRES',\n",
       " 'SXGP_201828_P2_BASK',\n",
       " 'SXGP_201828_P2_CTR',\n",
       " 'SXGP_201828_P2_CUST',\n",
       " 'SXGP_201828_P2_DIST',\n",
       " 'SXGP_201828_P2_ITM',\n",
       " 'SXGP_201829_P1_BASK',\n",
       " 'SXGP_201829_P1_CTR',\n",
       " 'SXGP_201829_P1_CUST',\n",
       " 'SXGP_201829_P1_DIST',\n",
       " 'SXGP_201829_P1_ITM',\n",
       " 'SXGP_201829_P2_BASK',\n",
       " 'SXGP_201829_P2_CTR',\n",
       " 'SXGP_201829_P2_CUST',\n",
       " 'SXGP_201829_P2_DIST',\n",
       " 'SXGP_201829_P2_ITM',\n",
       " 'SXGP_201829_P2_REDEM',\n",
       " 'SXGP_201829_P2_THRES',\n",
       " 'SXGP_201830_P1_ITM',\n",
       " 'SXGP_201830_P2_ITM',\n",
       " 'SXGP_201831_P1_ITM',\n",
       " 'SXGP_201831_P2_ITM',\n",
       " 'SXGP_25_28_BASK',\n",
       " 'SXGP_25_28_CTR',\n",
       " 'SXGP_25_28_CUST',\n",
       " 'SXGP_25_28_NOTCUST299UP',\n",
       " 'SXGP_REDEM_W26_27_BASK',\n",
       " 'SXGP_REDEM_W28_BASK',\n",
       " 'SXGP_REDEM_W29_BASK']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list_tbl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_sql_table('sxgp_201825_p1_itm', con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prod_code</th>\n",
       "      <th>sxgp_discount_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>011123982</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>005071488</td>\n",
       "      <td>129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>074095706</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>012050903</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>011122935</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>000055379</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   prod_code  sxgp_discount_price\n",
       "0  011123982                   99\n",
       "1  005071488                  129\n",
       "2  074095706                   13\n",
       "3  012050903                   13\n",
       "4  011122935                   20\n",
       "5  000055379                   22"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create price sensitivity (PS, MM) by daily sales data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = \\\n",
    "\"\"\"\n",
    "select      dd.date_id\n",
    "\n",
    ",           sum(case  when weight_uom_qty > 0 then weight_uom_qty\n",
    "                      when weight_uom_qty is null then item_qty\n",
    "                      else item_qty\n",
    "                end) as units\n",
    "                \n",
    ",           sum(net_spend_amt) as sales\n",
    "\n",
    ",           round(sum(net_spend_amt)/\n",
    "                  sum(case  when weight_uom_qty > 0 then weight_uom_qty\n",
    "                            when weight_uom_qty is null then item_qty\n",
    "                            else item_qty\n",
    "                      end)\n",
    "                 , 2) as ppu\n",
    "\n",
    "from        transaction_item_fct item\n",
    "inner join  date_dim dd \n",
    "on          item.date_id = dd.date_id\n",
    "inner join  store_dim_c sdc\n",
    "on          item.store_id = sdc.store_id \n",
    "inner join  prod_dim_c pdc\n",
    "on          item.prod_id = pdc.prod_id\n",
    "\n",
    "inner join  (\n",
    "            select    distinct card_id\n",
    "            from      prsn_pricesense_seg t1\n",
    "            ,         SEG_VALUE_DIM_C t3\n",
    "            ,         card_dim_c t5\n",
    "            where     t1.date_id in (select    max(date_id)\n",
    "                                     from   date_dim \n",
    "                                     where  FIS_WEEK_ID = 201833)\n",
    "            and       t1.prsn_seg_pricesense_id = t3.seg_value_id\n",
    "            and       t3.SEG_TYPE_CODE IN ('PRSN_PRICESENSE_SEG')\n",
    "            and       t1.prsn_id = t5.prsn_id\n",
    "            and       t3.seg_value_code in ('LA', 'MM')\n",
    "            ) pmc\n",
    "on          item.card_id = pmc.card_id\n",
    "\n",
    "inner join  (\n",
    "            select  prod_code\n",
    "            from    prod_dim_c\n",
    "            where   prod_code = '004049764'\n",
    "            ) prod\n",
    "on          pdc.prod_code = prod.prod_code  \n",
    "\n",
    "where       item.net_spend_amt > 0\n",
    "and         sdc.format_code in ('1', '2', '3', '4', '5')\n",
    "and         pdc.prod_comml_l30_code in ('01', '02', '03', '04', '09', '10', '13')\n",
    "and         dd.date_id in (select date_id from date_dim where fis_week_id between 201801 and 201834)\n",
    "\n",
    "group by    dd.date_id\n",
    "\n",
    "\"\"\"\n",
    "df = pd.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(238, 4)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_id</th>\n",
       "      <th>units</th>\n",
       "      <th>sales</th>\n",
       "      <th>ppu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-04-17</td>\n",
       "      <td>1773</td>\n",
       "      <td>74466.0</td>\n",
       "      <td>42.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-10-05</td>\n",
       "      <td>91852</td>\n",
       "      <td>2331461.5</td>\n",
       "      <td>25.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-03-24</td>\n",
       "      <td>9425</td>\n",
       "      <td>359262.0</td>\n",
       "      <td>38.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-05-29</td>\n",
       "      <td>2522</td>\n",
       "      <td>105831.5</td>\n",
       "      <td>41.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-06-19</td>\n",
       "      <td>118</td>\n",
       "      <td>6425.5</td>\n",
       "      <td>54.45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     date_id  units      sales    ppu\n",
       "0 2018-04-17   1773    74466.0  42.00\n",
       "1 2018-10-05  91852  2331461.5  25.38\n",
       "2 2018-03-24   9425   359262.0  38.12\n",
       "3 2018-05-29   2522   105831.5  41.96\n",
       "4 2018-06-19    118     6425.5  54.45"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploratory analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ppu</th>\n",
       "      <th>units</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>238.000000</td>\n",
       "      <td>238.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>47.112941</td>\n",
       "      <td>4248.764706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7.826547</td>\n",
       "      <td>9593.691818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>25.380000</td>\n",
       "      <td>104.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>41.442500</td>\n",
       "      <td>209.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>44.550000</td>\n",
       "      <td>609.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>54.885000</td>\n",
       "      <td>2949.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>91852.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              ppu         units\n",
       "count  238.000000    238.000000\n",
       "mean    47.112941   4248.764706\n",
       "std      7.826547   9593.691818\n",
       "min     25.380000    104.000000\n",
       "25%     41.442500    209.500000\n",
       "50%     44.550000    609.000000\n",
       "75%     54.885000   2949.750000\n",
       "max     55.000000  91852.000000"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['ppu', 'units']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fac677df8d0>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib notebook\n",
    "df['units'].plot(kind = 'hist', bins = 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date_id</th>\n",
       "      <th>units</th>\n",
       "      <th>sales</th>\n",
       "      <th>ppu</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2018-07-07</td>\n",
       "      <td>25658</td>\n",
       "      <td>974926.00</td>\n",
       "      <td>38.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>2018-07-08</td>\n",
       "      <td>27592</td>\n",
       "      <td>1048593.00</td>\n",
       "      <td>38.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>151</th>\n",
       "      <td>2018-09-08</td>\n",
       "      <td>22039</td>\n",
       "      <td>815388.25</td>\n",
       "      <td>37.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>2018-09-09</td>\n",
       "      <td>24366</td>\n",
       "      <td>901494.25</td>\n",
       "      <td>37.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-10-05</td>\n",
       "      <td>91852</td>\n",
       "      <td>2331461.50</td>\n",
       "      <td>25.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>2018-10-06</td>\n",
       "      <td>74266</td>\n",
       "      <td>1902411.00</td>\n",
       "      <td>25.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>2018-10-07</td>\n",
       "      <td>45351</td>\n",
       "      <td>1195123.50</td>\n",
       "      <td>26.35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       date_id  units       sales    ppu\n",
       "8   2018-07-07  25658   974926.00  38.00\n",
       "218 2018-07-08  27592  1048593.00  38.00\n",
       "151 2018-09-08  22039   815388.25  37.00\n",
       "215 2018-09-09  24366   901494.25  37.00\n",
       "1   2018-10-05  91852  2331461.50  25.38\n",
       "41  2018-10-06  74266  1902411.00  25.62\n",
       "232 2018-10-07  45351  1195123.50  26.35"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df['units']> 20000].sort_values(by = 'date_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7facbcd0f400>"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df[['ppu', 'units']].plot(x = 'ppu', y = 'units', kind = 'scatter')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Regression, Quadratic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model as lm\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear Regression (SKLearn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df[['ppu']]\n",
    "y = df['units']\n",
    "\n",
    "# Initialized linear Regression Object\n",
    "linreg = lm.LinearRegression()\n",
    "# train model\n",
    "linreg.fit(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept : 40317.23\n",
      "Coefficient : -765.57438\n",
      "Mean Sqr Error : 55901341.65\n",
      "R-square : 0.39\n"
     ]
    }
   ],
   "source": [
    "# print result\n",
    "print('Intercept : %.2f' % linreg.intercept_)\n",
    "print('Coefficient : %.5f' % linreg.coef_)\n",
    "print('Mean Sqr Error : %.2f' % mean_squared_error(y, linreg.predict(X)))\n",
    "print('R-square : %.2f' % r2_score(y, linreg.predict(X)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot fit line\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.scatter(df['ppu'], df['units'],  color = 'blue')\n",
    "plt.plot(df['ppu'], linreg.predict(X), color = 'red', linewidth = 3)\n",
    "plt.xticks(())\n",
    "plt.yticks(())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Quadratic Regression (SKLearn)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False)"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create polynomial object degree 2 : f(x) = x + x^2\n",
    "\n",
    "# transform linear parameter -> polynomial parameter\n",
    "poly = PolynomialFeatures(degree = 2)\n",
    "X2 = poly.fit_transform(X)\n",
    "\n",
    "# fit quadratic regression model\n",
    "qreg = lm.LinearRegression()\n",
    "qreg.fit(X2, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept : 332488.88\n",
      "Coefficient 0 + -13835.84970 x + 141.89410 x^2\n",
      "Mean Sqr Error : 10891899.51\n",
      "R-square : 0.88\n"
     ]
    }
   ],
   "source": [
    "# print result\n",
    "print('Intercept : %.2f' % qreg.intercept_)\n",
    "print('Coefficient {:.0f} + {:.5f} x + {:.5f} x^2'.format(qreg.coef_[0], qreg.coef_[1], qreg.coef_[2]))\n",
    "print('Mean Sqr Error : %.2f' % mean_squared_error(y, qreg.predict(X2)))\n",
    "print('R-square : %.2f' % r2_score(y, qreg.predict(X2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot fit line\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "x_pts = pd.DataFrame({'ppu':np.arange(df['ppu'].min(), df['ppu'].max(), step = 0.01)})\n",
    "x2_pts = poly.fit_transform(x_pts)\n",
    "y_pred = qreg.predict(x2_pts)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['ppu'], df['units'], color = 'blue')\n",
    "plt.plot(x_pts, y_pred, color = 'red', linewidth = 3)\n",
    "plt.xticks(())\n",
    "plt.yticks(())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linear Regression (StatModel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>units</td>      <th>  R-squared:         </th> <td>   0.390</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.387</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   150.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Oct 2018</td> <th>  Prob (F-statistic):</th> <td>3.80e-27</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>11:05:41</td>     <th>  Log-Likelihood:    </th> <td> -2460.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   238</td>      <th>  AIC:               </th> <td>   4925.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   236</td>      <th>  BIC:               </th> <td>   4932.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td> 4.032e+04</td> <td> 2975.955</td> <td>   13.548</td> <td> 0.000</td> <td> 3.45e+04</td> <td> 4.62e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ppu</th>   <td> -765.5744</td> <td>   62.316</td> <td>  -12.285</td> <td> 0.000</td> <td> -888.341</td> <td> -642.808</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>293.283</td> <th>  Durbin-Watson:     </th> <td>   2.103</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td>19532.928</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 5.230</td>  <th>  Prob(JB):          </th> <td>    0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>46.131</td>  <th>  Cond. No.          </th> <td>    292.</td> \n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  units   R-squared:                       0.390\n",
       "Model:                            OLS   Adj. R-squared:                  0.387\n",
       "Method:                 Least Squares   F-statistic:                     150.9\n",
       "Date:                Tue, 23 Oct 2018   Prob (F-statistic):           3.80e-27\n",
       "Time:                        11:05:41   Log-Likelihood:                -2460.6\n",
       "No. Observations:                 238   AIC:                             4925.\n",
       "Df Residuals:                     236   BIC:                             4932.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const       4.032e+04   2975.955     13.548      0.000    3.45e+04    4.62e+04\n",
       "ppu         -765.5744     62.316    -12.285      0.000    -888.341    -642.808\n",
       "==============================================================================\n",
       "Omnibus:                      293.283   Durbin-Watson:                   2.103\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):            19532.928\n",
       "Skew:                           5.230   Prob(JB):                         0.00\n",
       "Kurtosis:                      46.131   Cond. No.                         292.\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = df[['ppu']]\n",
    "y = df['units']\n",
    "\n",
    "# For statmodel should manually add constant for regression \n",
    "X = sm.add_constant(X)\n",
    "model = sm.OLS(y, X).fit()\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### QuadraticRegression (StatModel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use R style for regression formula\n",
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = smf.ols(formula = 'units ~ ppu + I(ppu**2)', data = df).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>units</td>      <th>  R-squared:         </th> <td>   0.881</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.880</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   871.2</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Tue, 23 Oct 2018</td> <th>  Prob (F-statistic):</th> <td>2.03e-109</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>11:16:22</td>     <th>  Log-Likelihood:    </th> <td> -2265.9</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   238</td>      <th>  AIC:               </th> <td>   4538.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   235</td>      <th>  BIC:               </th> <td>   4548.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "       <td></td>          <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th>   <td> 3.325e+05</td> <td> 9467.674</td> <td>   35.118</td> <td> 0.000</td> <td> 3.14e+05</td> <td> 3.51e+05</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>ppu</th>         <td>-1.384e+04</td> <td>  420.326</td> <td>  -32.917</td> <td> 0.000</td> <td>-1.47e+04</td> <td> -1.3e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>I(ppu ** 2)</th> <td>  141.8941</td> <td>    4.553</td> <td>   31.163</td> <td> 0.000</td> <td>  132.924</td> <td>  150.865</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>75.143</td> <th>  Durbin-Watson:     </th> <td>   1.948</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td>2065.499</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.505</td> <th>  Prob(JB):          </th> <td>    0.00</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td>17.397</td> <th>  Cond. No.          </th> <td>1.05e+05</td>\n",
       "</tr>\n",
       "</table><br/><br/>Warnings:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 1.05e+05. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  units   R-squared:                       0.881\n",
       "Model:                            OLS   Adj. R-squared:                  0.880\n",
       "Method:                 Least Squares   F-statistic:                     871.2\n",
       "Date:                Tue, 23 Oct 2018   Prob (F-statistic):          2.03e-109\n",
       "Time:                        11:16:22   Log-Likelihood:                -2265.9\n",
       "No. Observations:                 238   AIC:                             4538.\n",
       "Df Residuals:                     235   BIC:                             4548.\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "===============================================================================\n",
       "                  coef    std err          t      P>|t|      [0.025      0.975]\n",
       "-------------------------------------------------------------------------------\n",
       "Intercept    3.325e+05   9467.674     35.118      0.000    3.14e+05    3.51e+05\n",
       "ppu         -1.384e+04    420.326    -32.917      0.000   -1.47e+04    -1.3e+04\n",
       "I(ppu ** 2)   141.8941      4.553     31.163      0.000     132.924     150.865\n",
       "==============================================================================\n",
       "Omnibus:                       75.143   Durbin-Watson:                   1.948\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             2065.499\n",
       "Skew:                           0.505   Prob(JB):                         0.00\n",
       "Kurtosis:                      17.397   Cond. No.                     1.05e+05\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 1.05e+05. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}